@model IndexViewModel

<style>
    :root {
        --player-width: calc(50vw - 200px - 50px - 0.5rem - 0.5rem - 0.5rem - 0.5rem);
    }
</style>
<audio controls id="myAudio" hidden>
    <source id="audioSource">
</audio>
<div id="playerDiv" class="d-none d-flex flex-row" style="height: 200px;">
    <div id="songDiv" class="d-flex flex-row" style="width: 50vw; height: 200px; overflow: hidden">
        <img id="songCover" class="ms-2 me-2" src="/img/no-cover_200x200.jpg" style="height: 200px; width: 200px;"
             alt="Нет обложки"/>
        <div class="d-flex flex-column white-border" style="width: var(--player-width);">
            <span id="songName"
                  class="fs-3 text-truncate fw-bold text-center" style="width: 90%; margin:0 auto">не выбрана</span>
            <br/>
            <span id="songAuthor"
                  class="fs-5 text-center">не выбран</span>
            <div class="d-flex flex-row ms-auto me-auto">
                <button id="backwardStepButton" class="btn btn-outline-light me-2" style="width: 50px">
                    <i class="fa-solid fa-backward-step"></i>
                </button>
                <button id="backwardButton" class="btn btn-outline-light me-2" style="width: 50px">
                    <i class="fa-solid fa-backward"></i>
                </button>
                <button id="playButton" class="btn btn-outline-light me-2" style="width: 50px">
                    <i class="fa-solid fa-play"></i>
                </button>
                <button id="pauseButton" class="btn btn-outline-light me-2" style="width: 50px; display: none">
                    <i class="fa-solid fa-pause"></i>
                </button>
                <button id="forwardButton" class="btn btn-outline-light me-2" style="width: 50px">
                    <i class="fa-solid fa-forward"></i>
                </button>
                <button id="forwardStepButton" class="btn btn-outline-light me-2" style="width: 50px">
                    <i class="fa-solid fa-forward-step"></i>
                </button>
            </div>
            <span class="mt-auto fw-bold fs-5 text-center"><span id="songCurrentTime">не выбран</span> из
                <span
                    id="songDuration">не выбран</span></span>
        </div>
        <div class="d-flex flex-column ms-2 me-2" style="width: 50px;">
            <label class="form-label text-center white-border" for="volumeSlider">
                <span id="volumeValueSpan"></span>
            </label>
            <input class="volume-slider"
                   type="range"
                   id="volumeSlider"
                   name="volume"
                   min="0" max="1" step="0.01" value="0.15"/>
            <button id="muteButton" class="btn btn-outline-light mt-2" style="width: 50px">
                <i class="fa-solid fa-volume-high"></i>
            </button>
        </div>
    </div>
    <div class="d-flex flex-column white-border me-2" style="padding: 10px; width: 50vw">
        <div class="d-flex flex-row mb-2 white-border">
            <h5 class="text-center m-auto">Очередь</h5>
            <button id="clearQueueBtn" class="btn btn-outline-light me-2 mb-2 mt-2" style="width: 50px">
                <i class="fa-solid fa-trash"></i>
            </button>
        </div>
        <div id="queueDiv" class="d-flex flex-column"
             style="overflow-y: scroll; overflow-x: hidden; height: 200px;">

        </div>
    </div>
</div>
<div class="d-flex flex-row m-2">
    <button id="reconnectButton" class="btn btn-outline-light me-2" style="min-width: 200px;">
        Переподключиться <i class="fa-solid fa-rotate-right"></i>
    </button>
    <div class="mt-auto mb-auto text-center d-flex flex-column service-info" style="width: 100%;">

    </div>
</div>


<div class="d-flex flex-row">
    @foreach (var (tracks, name) in Model.Tracks)
    {
        <div class="d-flex flex-column ms-auto me-auto white-border" style="width: calc(50vw - 0.5rem - 0.5rem);">
            <h3 class="text-center">Плейлист @name</h3>
            <div class="song-container">
                @foreach (var yTrack in tracks)
                {
                    var invalidChars = new[] {'/', '\\', '?', '|', '>', '<', ':', '*', '"'};
                    var validFileName = string.Concat(yTrack.Title.Split(invalidChars, StringSplitOptions.RemoveEmptyEntries));
                    string validAuthorName;
                    if (yTrack.Artists.FirstOrDefault() is null)
                    {
                        validAuthorName = "Unknown";
                    }
                    else
                    {
                        validAuthorName = string.Concat(yTrack.Artists.First().Name
                                                              .Split(invalidChars, StringSplitOptions.RemoveEmptyEntries));
                    }

                    <div class="mb-2 d-flex flex-row justify-content-center">
                        @if (yTrack.CoverUri is not null)
                        {
                            <img src="@("https://" + yTrack.CoverUri[..^2] + "100x100")" alt="Обложка"/>
                        }
                        else
                        {
                            <img src="/img/no-cover_100x100.jpg" alt="Нет обложки"/>
                        }
                        <button class="ms-2 btn btn-dark changeSongBtn" style="height: 100px; width: 25vw"
                                data-id="@yTrack.Id"
                                data-fileName="@($"/music/{validFileName}_artist_{validAuthorName}.mp3")"
                                data-title="@yTrack.Title"
                                data-author="@(yTrack.Artists.Count > 0 ? yTrack.Artists[0].Name : "Неизвестен")"
                                data-coverUri="@(yTrack.CoverUri is not null ? "https://" + yTrack.CoverUri[..^2] + "200x200" : "/img/no-cover_200x200.jpg")">
                            <span class="text-truncate fs-5 text-center fw-bold"
                                  style="width: 20vw">@yTrack.Title</span>
                            <br/>
                            <span class="text-truncate fs-6 text-center"
                                  style="width: 20vw">@(yTrack.Artists.Count > 0 ? yTrack.Artists[0].Name : "Неизвестен")</span>
                        </button>
                        <button class="ms-2 btn btn-outline-light addToQueueBtn" style="height: 100px;width:100px"
                                data-id="@yTrack.Id"
                                data-fileName="@($"/music/{validFileName}_artist_{validAuthorName}.mp3")"
                                data-title="@yTrack.Title"
                                data-author="@(yTrack.Artists.Count > 0 ? yTrack.Artists[0].Name : "Неизвестен")"
                                data-coverUri="@(yTrack.CoverUri is not null ? "https://" + yTrack.CoverUri[..^2] + "200x200" : "/img/no-cover_200x200.jpg")">
                            <span class="text-truncate text-center"><i class="fa-solid fa-plus"></i></span>
                        </button>
                    </div>
                }
            </div>
        </div>
    }
</div>

@section Scripts
{
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/musicHub")
            .build();
        let audio = document.querySelector("#myAudio");
        let audioSource = document.querySelector("#audioSource");
        let backwardStepButton = document.querySelector("#backwardStepButton");
        let backwardButton = document.querySelector("#backwardButton");
        let playButton = document.querySelector("#playButton");
        let pauseButton = document.querySelector("#pauseButton");
        let muteButton = document.querySelector("#muteButton");
        let forwardStepButton = document.querySelector("#forwardStepButton");
        let forwardButton = document.querySelector("#forwardButton");
        let reconnectButton = document.querySelector("#reconnectButton");
        let songCurrentTimeSpan = document.querySelector("#songCurrentTime");
        let songDurationSpan = document.querySelector("#songDuration");
        let songTitleSpan = document.querySelector("#songName");
        let songAuthorSpan = document.querySelector("#songAuthor");
        let songCoverImg = document.querySelector("#songCover");
        let songDiv = document.querySelector("#songDiv");
        let queueDiv = document.querySelector("#queueDiv");
        let volumeSlider = document.querySelector("#volumeSlider");
        let volumeValueSpan = document.querySelector("#volumeValueSpan");
        let siteTitle = document.querySelector("#siteTitle");
        let serviceInfoDiv = $(".service-info");
        let currentSongIndex = 0;
        let queueCount = 0;
        let isHost = false;

        function sendServiceInfo(message, color) {
            let span = document.createElement("span");
            span.innerHTML = message;
            span.style.color = color;
            serviceInfoDiv.append(span);
            serviceInfoDiv.scrollTop(serviceInfoDiv[0].scrollHeight);
        }

        async function connect() {
            await connection.start();
            connection.invoke("JoinGroup");
        }

        try {
            connect().then(() => {
                console.log("Connected!");
                sendServiceInfo("Вы подключились к группе, нажмите куда-нибудь, чтобы у вас заработал плеер", "lightgreen");
            });

        } catch (err) {
            console.error(err);
        }
        connection.onclose(err => {
            console.error(err);
            isHost = false;
            sendServiceInfo("Потеряно соединение с сервером, обновите страницу или переподключитесь", "red");
        });


        playButton.onclick = function () {
            playSong(audio.currentTime);
            connection.invoke("PlaySong", audio.currentTime);
        }
        pauseButton.onclick = function () {
            pauseSong();
            connection.invoke("PauseSong");
        }
        muteButton.onclick = function () {
            if (audio.muted) {
                audio.muted = false;
                changeVolume(audio.volume);
                muteButton.innerHTML = `<i class="fa-solid fa-volume-high"></i>`;
            } else {
                audio.muted = true;
                changeVolume(audio.volume);
                muteButton.innerHTML = `<i class="fa-solid fa-volume-xmark"></i>`;
            }
        }
        reconnectButton.onclick = async () => {
            let result = confirm('Точно переподключиться?');
            if (!result) {
                return;
            }
            try {
                await connection.stop()
                sendServiceInfo("Переподключение...", "lightgray");
                await connect();
                sendServiceInfo("Вы переподключились к группе", "lightgreen");
            } catch (err) {
                console.error(err);
                sendServiceInfo("Произошла ошибка при переподключении", "red");
            }
        }
        forwardButton.onclick = function () {
            playSong(audio.currentTime + 10);
            connection.invoke("PlaySong", audio.currentTime);
        }
        backwardButton.onclick = function () {
            if (audio.currentTime < 10) {
                connection.invoke("PreviousSong");
                return;
            }
            playSong(audio.currentTime - 10);
            connection.invoke("PlaySong", audio.currentTime);
        }
        forwardStepButton.onclick = function () {
            connection.invoke("NextSong");
        }
        backwardStepButton.onclick = function () {
            connection.invoke("PreviousSong");
        }

        connection.on("ChangeSong", function (song) {
            $("#playerDiv").removeClass("d-none");
            audioSource.src = song.fileName;
            songTitleSpan.innerHTML = song.title;
            songAuthorSpan.innerHTML = song.author;
            songCoverImg.src = song.coverUri;
            siteTitle.innerHTML = "OTT Плеер | " + song.title;

            let newActiveSong = $("#song_" + song.queueIndex + " .queueSongBtn");
            newActiveSong.addClass("btn-light");
            newActiveSong.removeClass("btn-dark");

            if (currentSongIndex != song.queueIndex) {
                console.log(currentSongIndex, song.queueIndex);
                let oldActiveSong = $("#song_" + currentSongIndex + " .queueSongBtn");
                oldActiveSong.addClass("btn-dark");
                oldActiveSong.removeClass("btn-light");
            }


            currentSongIndex = song.queueIndex;
            audio.load();
            playSong(0);
        });
        $(document).on("click", ".changeSongBtn", function () {
            let id = $(this).attr("data-id");
            let fileName = $(this).attr("data-fileName");
            let title = $(this).attr("data-title");
            let author = $(this).attr("data-author");
            let coverUri = $(this).attr("data-coverUri");
            let song = {
                Id: id,
                FileName: fileName,
                Title: title,
                Author: author,
                CoverUri: coverUri
            };
            connection.invoke("ChangeSong", song);
        });

        connection.on("AddToQueue", function (song) {

            let songElement = document.createElement("div");
            songElement.id = "song_" + song.queueIndex;
            songElement.classList.add("mb-2");
            songElement.classList.add("d-flex");
            songElement.classList.add("flex-row");
            songElement.classList.add("justify-content-center");
            songElement.innerHTML = `
                    <img src="${song.coverUri}" alt="Обложка" style="height: 50px; width: 50px"/>
            
                    <button class="ms-2 btn btn-dark queueSongBtn d-flex flex-row" style="height: 50px; width: calc(50vw - 50px - 0.5rem)"
                            data-queueIndex="${song.queueIndex}">
                        <span class="text-truncate fs-6 text-center fw-bold" style="width: 80%">${song.title}</span>
                        <span class="text-truncate fs-6 text-center"
                              style="width: 20%">${song.author}</span>
                    </button>
                </div>`;
            queueDiv.appendChild(songElement);

            let queueSongBtn = songElement.querySelector(".queueSongBtn");
            queueSongBtn.addEventListener("click", function () {
                let queueIndex = queueSongBtn.getAttribute("data-queueIndex");
                connection.invoke("ChangeSongByQueueIndex", queueIndex);
            });

            queueCount++;
        });
        $(document).on("click", ".addToQueueBtn", function () {
            let id = $(this).attr("data-id");
            let fileName = $(this).attr("data-fileName");
            let title = $(this).attr("data-title");
            let author = $(this).attr("data-author");
            let coverUri = $(this).attr("data-coverUri");
            let song = {
                Id: id,
                FileName: fileName,
                Title: title,
                Author: author,
                CoverUri: coverUri,
                QueueIndex: queueCount
            };
            connection.invoke("AddToQueue", song);
        });

        connection.on("ClearQueue", function () {
            queueDiv.innerHTML = ``;
            queueCount = 0;
        });
        $("#clearQueueBtn").click(() => {
            connection.invoke("ClearQueue");
        });

        connection.on("PauseSong", pauseSong);

        function pauseSong() {
            audio.pause();
            playButton.style.display = "block";
            pauseButton.style.display = "none";
        }

        connection.on("PlaySong", playSong);

        function playSong(time) {
            playButton.style.display = "none";
            pauseButton.style.display = "block";
            audio.currentTime = time;
            audio.play();
        }

        audio.onended = function () {
            if (isHost) {
                console.log("NextSong cuz ended");
                connection.invoke("NextSong");
            }
        }
        audio.onpause = function (e) {
            e.preventDefault();
            if (audio.duration - audio.currentTime < 0.1) {
                return;
            }
            pauseSong();
            connection.invoke("PauseSong");
        }
        audio.onplay = function () {
            connection.invoke("PlaySong", audio.currentTime);
        }
        audio.ontimeupdate = function () {
            // if (audio.currentTime >= audio.duration - 0.1) {
            //     connection.invoke("NextSong");
            //     return;
            // }
            let minutes = Math.floor(audio.currentTime / 60);
            let seconds = Math.floor(audio.currentTime % 60);
            songCurrentTimeSpan.innerHTML = `${minutes < 10 ? "0" + minutes : minutes}:${seconds < 10 ? "0" + seconds : seconds}`;
        }
        audio.ondurationchange = function () {
            let minutes = Math.floor(audio.duration / 60);
            let seconds = Math.floor(audio.duration % 60);
            songDurationSpan.innerHTML = `${minutes < 10 ? "0" + minutes : minutes}:${seconds < 10 ? "0" + seconds : seconds}`;
        }

        document.addEventListener("DOMContentLoaded", () => changeVolume(volumeSlider.value));
        volumeSlider.oninput = () => {
            changeVolume(volumeSlider.value);

        }

        function changeVolume(volume) {
            const volumePercent = `${Math.floor(volume * 100)}%`;
            volumeSlider.style.setProperty('--volume-value', volumePercent);
            audio.volume = volume;
            volumeValueSpan.innerHTML = volumePercent;
        }

        connection.on("BecomeHost", () => {
            isHost = true;
            sendServiceInfo("Вы стали хостом, это ничего не дает, но это круто!", "lightgreen");
        })

    </script>
}
